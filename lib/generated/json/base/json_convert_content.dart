// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:inspector/app/data/address_entity.dart';
import 'package:inspector/app/data/apply_info_entity.dart';
import 'package:inspector/app/data/area_list_entity.dart';
import 'package:inspector/app/data/baidu_ocr_entity.dart';
import 'package:inspector/app/data/bank_entity.dart';
import 'package:inspector/app/data/bill_entity.dart';
import 'package:inspector/app/data/bind_pay_entity.dart';
import 'package:inspector/app/data/location_entity.dart';
import 'package:inspector/app/data/only_price_entity.dart';
import 'package:inspector/app/data/order_detail_entity.dart';
import 'package:inspector/app/data/order_input_entity.dart';
import 'package:inspector/app/data/order_list_entity.dart';
import 'package:inspector/app/data/publish_order_entity.dart';
//mydev
import 'package:inspector/app/data/publish_conv_entity.dart';
import 'package:inspector/app/data/report_entity.dart';
import 'package:inspector/app/data/user_info_entity.dart';
import 'package:inspector/app/data/vip_price_entity.dart';
import 'package:inspector/app/data/wallet_entity.dart';

JsonConvert jsonConvert = JsonConvert();

class JsonConvert {
  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
    final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }
      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type == "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type == "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else {
        return JsonConvert.fromJsonAsT<T>(value);
      }
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return null;
    }
  }

  //Go back to a single instance by type
  static M? _fromJsonSingle<M>(Map<String, dynamic> json) {
    final String type = M.toString();
    if (type == (AddressEntity).toString()) {
      return AddressEntity.fromJson(json) as M;
    }
    if (type == (AddressRows).toString()) {
      return AddressRows.fromJson(json) as M;
    }
    if (type == (ApplyInfoEntity).toString()) {
      return ApplyInfoEntity.fromJson(json) as M;
    }
    if (type == (AreaListEntity).toString()) {
      return AreaListEntity.fromJson(json) as M;
    }
    if (type == (BaiduOcrEntity).toString()) {
      return BaiduOcrEntity.fromJson(json) as M;
    }
    if (type == (BankEntity).toString()) {
      return BankEntity.fromJson(json) as M;
    }
    if (type == (BillEntity).toString()) {
      return BillEntity.fromJson(json) as M;
    }
    if (type == (BillCapitalModelList).toString()) {
      return BillCapitalModelList.fromJson(json) as M;
    }
    if (type == (BindPayEntity).toString()) {
      return BindPayEntity.fromJson(json) as M;
    }
    if (type == (LocationEntity).toString()) {
      return LocationEntity.fromJson(json) as M;
    }
    if (type == (LocationGeocodes).toString()) {
      return LocationGeocodes.fromJson(json) as M;
    }
    if (type == (LocationGeocodesNeighborhood).toString()) {
      return LocationGeocodesNeighborhood.fromJson(json) as M;
    }
    if (type == (LocationGeocodesBuilding).toString()) {
      return LocationGeocodesBuilding.fromJson(json) as M;
    }
    if (type == (OnlyPriceEntity).toString()) {
      return OnlyPriceEntity.fromJson(json) as M;
    }
    if (type == (OrderDetailEntity).toString()) {
      return OrderDetailEntity.fromJson(json) as M;
    }
    if (type == (OrderInputEntity).toString()) {
      return OrderInputEntity.fromJson(json) as M;
    }
    if (type == (OrderListEntity).toString()) {
      return OrderListEntity.fromJson(json) as M;
    }
    if (type == (OrderListRows).toString()) {
      return OrderListRows.fromJson(json) as M;
    }
    if (type == (PublishOrderEntity).toString()) {
      return PublishOrderEntity.fromJson(json) as M;
    }
    //mydev
    if (type == (PublishConvEntity).toString()) {
      return PublishConvEntity.fromJson(json) as M;
    }
    //mydev
    /*if (type == (RecordRows).toString()) {
      return RecordRows.fromJson(json) as M;
    }*/
    if (type == (PublishConvRows).toString()) {
      return PublishConvRows.fromJson(json) as M;
    }
    if (type == (PublishOrderRows).toString()) {
      return PublishOrderRows.fromJson(json) as M;
    }
    if (type == (ReportEntity).toString()) {
      return ReportEntity.fromJson(json) as M;
    }
    if (type == (ReportFileModels).toString()) {
      return ReportFileModels.fromJson(json) as M;
    }
    if (type == (UserInfoEntity).toString()) {
      return UserInfoEntity.fromJson(json) as M;
    }
    if (type == (VipPriceEntity).toString()) {
      return VipPriceEntity.fromJson(json) as M;
    }
    if (type == (WalletEntity).toString()) {
      return WalletEntity.fromJson(json) as M;
    }
    if (type == (OrderDateEntity).toString()) {
      return OrderDateEntity.fromJson(json) as M;
    }

    print("$type not found");

    return null;
  }

  //list is returned by type
  static M? _getListChildType<M>(List<dynamic> data) {
    if (<AddressEntity>[] is M) {
      return data.map<AddressEntity>((e) => AddressEntity.fromJson(e)).toList()
          as M;
    }
    if (<AddressRows>[] is M) {
      return data.map<AddressRows>((e) => AddressRows.fromJson(e)).toList()
          as M;
    }
    if (<ApplyInfoEntity>[] is M) {
      return data
          .map<ApplyInfoEntity>((e) => ApplyInfoEntity.fromJson(e))
          .toList() as M;
    }
    if (<AreaListEntity>[] is M) {
      return data
          .map<AreaListEntity>((e) => AreaListEntity.fromJson(e))
          .toList() as M;
    }
    if (<BaiduOcrEntity>[] is M) {
      return data
          .map<BaiduOcrEntity>((e) => BaiduOcrEntity.fromJson(e))
          .toList() as M;
    }
    if (<BankEntity>[] is M) {
      return data.map<BankEntity>((e) => BankEntity.fromJson(e)).toList() as M;
    }
    if (<BillEntity>[] is M) {
      return data.map<BillEntity>((e) => BillEntity.fromJson(e)).toList() as M;
    }
    if (<BillCapitalModelList>[] is M) {
      return data
          .map<BillCapitalModelList>((e) => BillCapitalModelList.fromJson(e))
          .toList() as M;
    }
    if (<BindPayEntity>[] is M) {
      return data.map<BindPayEntity>((e) => BindPayEntity.fromJson(e)).toList()
          as M;
    }
    if (<LocationEntity>[] is M) {
      return data
          .map<LocationEntity>((e) => LocationEntity.fromJson(e))
          .toList() as M;
    }
    if (<LocationGeocodes>[] is M) {
      return data
          .map<LocationGeocodes>((e) => LocationGeocodes.fromJson(e))
          .toList() as M;
    }
    if (<LocationGeocodesNeighborhood>[] is M) {
      return data
          .map<LocationGeocodesNeighborhood>(
              (e) => LocationGeocodesNeighborhood.fromJson(e))
          .toList() as M;
    }
    if (<LocationGeocodesBuilding>[] is M) {
      return data
          .map<LocationGeocodesBuilding>(
              (e) => LocationGeocodesBuilding.fromJson(e))
          .toList() as M;
    }
    if (<OnlyPriceEntity>[] is M) {
      return data
          .map<OnlyPriceEntity>((e) => OnlyPriceEntity.fromJson(e))
          .toList() as M;
    }
    if (<OrderDetailEntity>[] is M) {
      return data
          .map<OrderDetailEntity>((e) => OrderDetailEntity.fromJson(e))
          .toList() as M;
    }
    if (<OrderInputEntity>[] is M) {
      return data
          .map<OrderInputEntity>((e) => OrderInputEntity.fromJson(e))
          .toList() as M;
    }
    if (<OrderListEntity>[] is M) {
      return data
          .map<OrderListEntity>((e) => OrderListEntity.fromJson(e))
          .toList() as M;
    }
    if (<OrderListRows>[] is M) {
      return data.map<OrderListRows>((e) => OrderListRows.fromJson(e)).toList()
          as M;
    }
    if (<PublishOrderEntity>[] is M) {
      return data
          .map<PublishOrderEntity>((e) => PublishOrderEntity.fromJson(e))
          .toList() as M;
    }
    //mydev
    if (<PublishConvEntity>[] is M) {
      return data
          .map<PublishConvEntity>((e) => PublishConvEntity.fromJson(e))
          .toList() as M;
    }
    //mydev
    /*if (<RecordRows>[] is M) {
      return data.map<RecordRows>((e) => RecordRows.fromJson(e)).toList() as M;
    }*/
    if (<PublishOrderRows>[] is M) {
      return data
          .map<PublishOrderRows>((e) => PublishOrderRows.fromJson(e))
          .toList() as M;
    }
    //mydev
    if (<PublishConvRows>[] is M) {
      return data
          .map<PublishConvRows>((e) => PublishConvRows.fromJson(e))
          .toList() as M;
    }
    if (<ReportEntity>[] is M) {
      return data.map<ReportEntity>((e) => ReportEntity.fromJson(e)).toList()
          as M;
    }
    if (<ReportFileModels>[] is M) {
      return data
          .map<ReportFileModels>((e) => ReportFileModels.fromJson(e))
          .toList() as M;
    }
    if (<UserInfoEntity>[] is M) {
      return data
          .map<UserInfoEntity>((e) => UserInfoEntity.fromJson(e))
          .toList() as M;
    }
    if (<VipPriceEntity>[] is M) {
      return data
          .map<VipPriceEntity>((e) => VipPriceEntity.fromJson(e))
          .toList() as M;
    }
    if (<WalletEntity>[] is M) {
      return data.map<WalletEntity>((e) => WalletEntity.fromJson(e)).toList()
          as M;
    }
    if (<OrderDateEntity>[] is M) {
      return data
          .map<OrderDateEntity>((e) => OrderDateEntity.fromJson(e))
          .toList() as M;
    }

    print("${M.toString()} not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json == null) {
      return null;
    }
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json as Map<String, dynamic>);
    }
  }
}
